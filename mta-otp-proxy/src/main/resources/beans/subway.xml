<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- subway - this is essentially equivalent to Kurt's ProxyModule class  -->
    <bean class="org.onebusaway.gtfs_realtime.exporter.GtfsRealtimeExporterImpl" id="subwayTuExporter" />

    <bean id="cloudwatchService" class="com.kurtraschke.nyctrtproxy.services.CloudwatchProxyDataListener" />

    <bean class="com.kurtraschke.nyctrtproxy.services.LazyTripMatcher" autowire="byType" name="lazyTripMatcher">
        <property name="gtfsDataService" ref="subwayGtfsService"/>
        <property name="agencyMatchId" value="${subway.feedid}" />
        <property name="allowServiceDayCoercion" value="false" />
    </bean>

    <bean class="com.kurtraschke.nyctrtproxy.services.TripActivator" name="tripActivator">
        <property name="agencyMatchId" value="${subway.feedid}" />
        <property name="gtfsDataService" ref="subwayGtfsService" />
    </bean>

    <bean class="com.kurtraschke.nyctrtproxy.services.DirectionsService" id="directionsService" init-method="init" autowire="byType">
        <property name="gtfsDataService" ref="subwayGtfsService" />
        <property name="directionCsv" value="directions.csv" />
    </bean>

    <bean class="com.camsys.shims.gtfsrt.tripUpdates.subway.S3MapStopIdTransformStrategy" id="stopIdTransformStrategy" init-method="init">
        <property name="url" value="${subway.stop_map.url}" />
    </bean>

    <bean class="com.camsys.shims.gtfsrt.tripUpdates.subway.S3SubwayFilterStrategy" id="subwayFilterStrategy" init-method="init">
        <property name="url" value="${subway.route_stops.csv}" />
        <property name="profile" value="${subway.route_stops.profile}" />
    </bean>

    <bean class="com.kurtraschke.nyctrtproxy.services.TripUpdateProcessor" autowire="byType">
        <property name="directionsService" ref="directionsService" />
        <property name="stopIdTransformStrategy" ref="stopIdTransformStrategy" />
        <property name="stopFilterStrategy" ref="subwayFilterStrategy" />
        <property name="cloudwatchNamespace" value="${subway.cloudwatch.namespace}" />
    </bean>

    <bean class="com.kurtraschke.nyctrtproxy.ProxyProvider" id="subwayTuTask" init-method="start" autowire="byType">
        <!-- for DEV testing only -->
        <property name="overrideFeedToUrl">
            <map>
                <entry key="16">
                    <value>s3://gtfs-rt/nyct/gtfs-nqrw</value>
                </entry>
            </map>
        </property>
        <property name="feedToProfile">
            <map>
                <entry key="16">
                    <value>mtaqa</value>
                </entry>
            </map>
        </property>
        <property name="feedToRegion">
            <map>
                <entry key="16">
                    <value>us-east-2</value>
                </entry>
            </map>
        </property>

        <property name="key" value="${datamine.key}" />
        <property name="tripUpdatesSink" ref="subwayTuExporter" />
        <property name="feedIds" value="[1, 2, 11, 16, 21, 26, 31, 36, 51]" />
    </bean>

    <bean id="subwayTripUpdates" class="com.camsys.shims.servlet.HttpRequestGtfsRealtimeSink">
        <property name="source" ref="subwayTuExporter" />
    </bean>

    <!-- Subway alerts: merge from service status and elevators -->
    <bean name="subwayAlertTask" class="com.camsys.shims.util.source.MergingGtfsRealtimeSource">
        <constructor-arg>
            <list>
                <ref bean="subwayStatusAlerts" />
                <ref bean="subwayElevatorAlerts" />
            </list>
        </constructor-arg>
    </bean>

    <bean id="subwayServiceAlerts" class="com.camsys.shims.servlet.HttpRequestGtfsRealtimeSink">
        <property name="source" ref="subwayAlertTask" />
    </bean>

    <bean name="subwayStatusAlerts" class="com.camsys.shims.util.source.TransformingGtfsRealtimeSource">
        <property name="deserializer" ref="siriDeserializerWithModifications" />
        <property name="transformer" ref="siriTransformer" />
        <property name="sourceUrl" value="${subway.gms.url}" />
    </bean>

    <!-- Subway Elevators -->
    <bean name="elevatorsDeserializer" class="com.camsys.shims.gtfsrt.alerts.elevator.subway.deserializer.SubwayElevatorsDeserializer" />
    <bean name="elevatorsTransformer" class="com.camsys.shims.gtfsrt.alerts.elevator.subway.transformer.SubwayElevatorsTransformer">
        <property name="stopsProvider" ref="subwayElevatorProvider" />
    </bean>
    <bean id="subwayElevatorAlerts" class="com.camsys.shims.util.source.TransformingGtfsRealtimeSource" autowire="byType">
        <property name="transformer" ref="elevatorsTransformer" />
        <property name="deserializer" ref="elevatorsDeserializer" />
        <property name="sourceUrl" value="${subway.elev.url}" />
    </bean>
    <bean id="subwayElevatorProvider" class="com.camsys.shims.gtfsrt.alerts.elevator.subway.stops_provider.S3CsvElevatorToStopsProvider" init-method="init">
        <property name="url" value="${subway.elev.csv}" />
    </bean>


    <!-- this was for a debug UI for subway predictions, to grab predictions direct from the source RT feed -->
    <bean name="subwayStopTimes" class="com.camsys.shims.servlet.HttpRequestSubwayStopTimes">
        <!-- for DEV testing only -->
        <property name="overrideFeedToUrl">
            <map>
                <entry key="16">
                    <value>s3://gtfs-rt/nyct/gtfs-nqrw</value>
                </entry>
            </map>
        </property>
        <property name="feedToProfile">
            <map>
                <entry key="16">
                    <value>mtaqa</value>
                </entry>
            </map>
        </property>
        <property name="feedToRegion">
            <map>
                <entry key="16">
                    <value>us-east-2</value>
                </entry>
            </map>
        </property>
        <property name="key" value="${datamine.key}" />
    </bean>
</beans>